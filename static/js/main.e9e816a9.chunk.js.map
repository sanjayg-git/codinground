{"version":3,"sources":["Dropdown.js","QuestionPage.js","App.js","serviceWorker.js","index.js"],"names":["Dropdown","Component","props","state","streams","exams","exms","selectedItemStream","selectedItemExam","s","changeStream","bind","changeExam","handleSubmit","initial_s","fetch","then","response","json","d","data","map","post","setState","initial_e","event","this","target","value","filter","strm","stream","console","log","preventDefault","to","onSubmit","style","textAlign","padding","margin","onChange","hidden","key","_id","name","type","App","color","backgroundColor","fontFamily","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8RAqHeA,GCnHYC,Y,kDDI1B,WAAYC,GACX,IAAD,8BACC,cAAMA,IACDC,MAAM,CACVC,QAAQ,GACRC,MAAM,GACNC,KAAK,GACLC,mBAAqB,GACrBC,iBAAiB,GACjBC,GAAE,GAEH,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBAZrB,E,gEAeoB,IAAD,OACdG,EAAU,GACXC,MAAM,2EACFC,MAAK,SAAAC,GACF,OAAOA,EAASC,UACjBF,MAAK,SAAAG,GACRL,EAAYK,EAAEC,KAAKhB,QAAQiB,KAAI,SAAAC,GAC3B,OAAOA,KAGX,EAAKC,SAAS,CACVnB,QAASU,OAKb,IAAIU,EAAU,GACjBT,MAAM,2EACFC,MAAK,SAAAC,GACF,OAAOA,EAASC,UACjBF,MAAK,SAAAG,GACRK,EAAYL,EAAEC,KAAKf,MAAMgB,KAAI,SAAAC,GACzB,OAAOA,KAGX,EAAKC,SAAS,CACVlB,MAAOmB,S,mCAMLC,GACZC,KAAKH,SAAS,CAAChB,mBAAoBkB,EAAME,OAAOC,QAEhDF,KAAKH,SAAS,CAACjB,KAAOoB,KAAKvB,MAAME,MAAMwB,QAAO,SAAAC,GAAI,OAAIA,EAAKC,SAAWN,EAAME,OAAOC,WAEnFI,QAAQC,IAAIP,KAAKvB,MAAMG,Q,iCAGbmB,GACVC,KAAKH,SAAS,CAACf,iBAAkBiB,EAAME,OAAOC,U,mCAKlCH,GAKZ,OAJAA,EAAMS,iBAIC,kBAAC,IAAD,CAAUC,GAAG,oB,+BAgBpB,OAEC,6BACC,0BAAMC,SAAYV,KAAKb,cACtB,yBAAKwB,MAAS,CAACC,UAAU,SAASC,QAAQ,OAAOC,OAAO,SACvD,4BAASZ,MAAQF,KAAKvB,MAAMI,mBAAoBkC,SAAYf,KAAKhB,cAChE,4BAAQgC,QAAM,GAAd,mBACChB,KAAKvB,MAAMC,QAAQiB,KAAI,SAACZ,GAAD,OAAM,4BAAQkC,IAAOlC,EAAEmC,IAAKhB,MAAOnB,EAAEmC,KAAMnC,EAAEoC,WAIvE,yBAAKR,MAAS,CAACC,UAAU,SAAUC,QAAQ,OAAOC,OAAO,SACxD,4BAAQZ,MAASF,KAAKvB,MAAMK,iBAAkBiC,SAAYf,KAAKd,YAC9D,4BAAQ8B,QAAM,GAAd,iBACChB,KAAKvB,MAAMG,KAAKe,KAAI,SAACZ,GAAD,OAAM,4BAAQkC,IAAOlC,EAAEmC,IAAKhB,MAAOnB,EAAEmC,KAAMnC,EAAEoC,WAGpE,yBAAKR,MAAS,CAACC,UAAW,SAAUC,QAAQ,OAAOC,OAAO,SACxD,2BAAOM,KAAM,SAASlB,MAAQ,gB,GAvGd3B,cEmBR8C,MAhBf,WAQE,OACE,6BACE,wBAAIV,MATQ,CACZW,MAAO,QACPC,gBAAiB,aACjBV,QAAS,OACTW,WAAY,QACZZ,UAAW,WAIX,uBACA,kBAAC,EAAD,QCNca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.e9e816a9.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {Router, Route, Link,BrowserRouter} from 'react-router-dom';\r\nimport QuestionPage from './QuestionPage';\r\nclass Dropdown extends Component{\r\n\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\tstreams:[],\r\n\t\t\texams:[],\r\n\t\t\texms:[],\r\n\t\t\tselectedItemStream : \"\",\r\n\t\t\tselectedItemExam:\"\",\r\n\t\t\ts:false\r\n\t\t};\r\n\t\tthis.changeStream = this.changeStream.bind(this);\r\n\t\tthis.changeExam = this.changeExam.bind(this);\r\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tlet initial_s=[];\r\n    \tfetch('https://www.exambazaar.com/api/coding-round/routes/exam-info/7688874888')\r\n        .then(response => {\r\n            return response.json();\r\n        }).then(d => {\r\n        initial_s = d.data.streams.map(post => {\r\n            return post\r\n        });\r\n        //console.log(initials);\r\n        this.setState({\r\n            streams: initial_s,\r\n            //streams: [{\"_id\":\"\" ,\"name\":\"-Select Your Stream-\"}].concat(initial_s),\r\n        });\r\n        });\r\n\r\n        let initial_e=[];\r\n    \tfetch('https://www.exambazaar.com/api/coding-round/routes/exam-info/7688874888')\r\n        .then(response => {\r\n            return response.json();\r\n        }).then(d => {\r\n        initial_e = d.data.exams.map(post => {\r\n            return post\r\n        });\r\n       // console.log(initial_e);\r\n        this.setState({\r\n            exams: initial_e,\r\n        });\r\n        });\r\n\t\t\t\r\n\t}\r\n\r\n\tchangeStream(event){\r\n\t\tthis.setState({selectedItemStream: event.target.value});\r\n\t\t//console.log(this.state.selectedItemStream);\r\n\t\tthis.setState({exms : this.state.exams.filter(strm => strm.stream === event.target.value)});\r\n\t\t//this.setState({exms : this.state.exams.map(p => { return p.find(strm => strm.stream === event.target.value)}),});\r\n\t\tconsole.log(this.state.exms);\r\n\t}\r\n\r\n\tchangeExam(event){\r\n\t\tthis.setState({selectedItemExam: event.target.value});\r\n\t\t//console.log(this.state.selectedItemStream);\r\n\t}\r\n\r\n\r\n\thandleSubmit(event){\r\n\t\tevent.preventDefault();\r\n\t\t//console.log(\"hello\");\r\n\t\t//this.props.history.push('/QuestionPage');\r\n\t\t//this.setState({s:true});\r\n\t\treturn <Redirect to='/QuestionPage' />\r\n\t}\r\n\r\n\r\n\trender()\r\n\t{\r\n\t\t/*if(this.state.s)\r\n\t\t{\r\n\t\t\treturn (\r\n\t\t\t<BrowserRouter>\r\n\t\t\t  <div>\r\n\t\t\t   <Route path=\"/QuestionPage\" Component={QuestionPage} />\r\n\t\t\t  </div>\r\n\t\t\t</BrowserRouter>\r\n\t\t\t);\r\n\t\t}*/\r\n\t\treturn(\r\n\r\n\t\t\t<div>\r\n\t\t\t\t<form onSubmit = {this.handleSubmit}>\r\n\t\t\t\t\t<div style = {{textAlign:\"center\",padding:\"10px\",margin:\"10px\"}}>\r\n\t\t\t\t\t\t<select  value ={this.state.selectedItemStream} onChange = {this.changeStream}>\r\n\t\t\t\t\t\t\t<option hidden> SELECT STREAM </option>\r\n\t\t\t\t\t\t\t{this.state.streams.map((s)=> <option key = {s._id} value={s._id}>{s.name}</option>)}\r\n\t\t\t\t\t\t</select>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div style = {{textAlign:\"center\", padding:\"10px\",margin:\"10px\"}}>\r\n\t\t\t\t\t\t<select value = {this.state.selectedItemExam} onChange = {this.changeExam}>\r\n\t\t\t\t\t\t\t<option hidden> SELECT EXAM </option>\r\n\t\t\t\t\t\t\t{this.state.exms.map((s)=> <option key = {s._id} value={s._id}>{s.name}</option>)}\r\n\t\t\t\t\t\t</select>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div style = {{textAlign: \"center\", padding:\"10px\",margin:\"10px\"}}>\r\n\t\t\t\t\t \t<input type= \"submit\" value = \"Next\"/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</form>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\nexport default Dropdown;","import React,{Component} from 'react';\r\n\r\nclass QuestionPage extends Component{\r\n\r\n\trender(){\r\n\r\n\t\treturn (<h1> Welcome to Question page </h1>);\r\n\t}\r\n}\r\nexport default QuestionPage;","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Dropdown from './Dropdown';\n//import QuestionPage from './QuestionPage';\n//import Exam from './Exam'./;\n\nfunction App() {\n  const mystyle = {\n      color: \"white\",\n      backgroundColor: \"DodgerBlue\",\n      padding: \"10px\",\n      fontFamily: \"Arial\",\n      textAlign: \"center\"\n    };\n  return (\n    <div >\n      <h1 style={mystyle} > Hello Explorer :) </h1>\n      <Dropdown/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}